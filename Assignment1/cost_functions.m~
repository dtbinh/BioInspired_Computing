%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BioInspired Computing - UnB 2/2017
% Jess√© Barreto - 17/0067033
% Assignment 1 - Implementation of benchmark cost functions.
%
% Function parameters: 
% functionName - The function name as a string.
% dimension - The search space dimension.
% range - The search space ranges as a vector of ith dimension of vectors [begin, end]
% npoints - The number points;
% Function results:
% searchSpace - As a vector;
% functionResults - As a vector;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function [spaces, result, symbolicFunction] = cost_function(functionName, dimension, ranges, npoints)

% Symbolic
syms X F
X = sym('x', [1 dimension]);
if functionName == string('sphere')
    F = 0;
    for i=1:dimension
       F = F + X(i)^2;
    end
elseif functionName == string('elliptic')
    F = 0;
    for i=1:dimension
       F = F + (1e6)^((i - 1)/(dimension - 1)) * X(i)^2; 
    end
elseif functionName == string('rastrigin')
    F = 0;
    for i=1:dimension
       F = F + (X(i)^2 - 10 * cos(2 * pi * X(i)) + 10); 
    end
else % Quadratic
    F = 0;
    for i=1:dimension
       S = 0;
       for j=1:i
           S = S + X(j);
       end
       F = F + S^2;
    end
end
symbolicFunction = F;

% Numeric
spaces = zeros(dimension, npoints);
for i=1:dimension
   spaces(i,:) = linspace(ranges(i, 1) ,ranges(i, 2), npoints); 
end

parpool(length(spaces)^dimension)
parfor
    
end

%     % Allocate the variables
%     spaces = [];
%     for i=1:dimension
%         spaces = [spaces; linspace(ranges(i, 1), ranges(i,2), npoints)];
%     end
%     result = zeros(1, length(spaces));
    
% 	for i=1:dimension
% 		searchSpace(i,:) = space;
%     end
%     
%     if functionName == string('sphere')
%         result = zeros(size(searchSpace));
%         
%         for i=1:dimension
%             result = result + searchSpace(i,:).^2;
%         end
%     end
    
% 	if functionName == string('sphere')
% 		result = 0;
%         for i=1:dimension
%     		result = result + sum(searchSpace(i, :).^2);
%         end
%     elseif functionName == string('elliptic')
%         result = 0;
%         for i=1:dimension
%            result = result + (1e6)^((i - 1)/(dimension - 1)) * searchSpace(i)  
%         end
%     elseif functionName == string('rastrigin')
%         result = 0;
%         for i=1:dimension
%             result = result + searchSpace(i)^2 - 10 * cos(2 * pi * searchSpace(i)) + 10;
%         end
%     else % Quadric
%         result = 0;
%         for i = 1:dimension
%             innerSum = 0;
%             for j = 1:i
%                innerSum = innerSum + searchSpace(j);
%             end
%             result = result + innerSum^2;
%         end
%     end
    
%     switch functionName
%         case 'sphere'
%     		result = 0;
%             for i=1:dimension
%         		result += searchSpace[i] * searchSpace[i];
%             end
%         case 'rastrigin'
%         	result = 0;
%         case 'rosenbrock'
%         	result = 0;
%         case 'schwefel'
%         	result = 0;
%         case 'ackley'
%         	result = 0;
%         otherwise % Quadric is the default
%         	result = 0;
%     end
    
end
